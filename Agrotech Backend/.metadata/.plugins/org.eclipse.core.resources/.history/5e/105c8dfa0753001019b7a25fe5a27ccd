package com.agrotech.AgrotechBackend.controller;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.agrotech.AgrotechBackend.dto.UserDTO;
import com.agrotech.AgrotechBackend.service.UserService;

@RestController
@RequestMapping("/auth")
@CrossOrigin
public class AuthController {

    @Autowired private UserService userService;

    @PostMapping("/register")
    public String register(@RequestBody UserDTO dto) {
        return userService.register(dto);
    }

    @PostMapping("/login")
    public String login(@RequestBody UserDTO dto) {
        return userService.login(dto);
    }
    
 // In-memory store to simulate OTPs (can use Redis or DB in real case)
    private final Map<String, String> otpStorage = new HashMap<>();

    @PostMapping("/send-otp")
    public ResponseEntity<?> sendOtp(@RequestBody Map<String, String> request) {
        String phone = request.get("phone");
        if (phone == null || phone.isEmpty()) {
            return ResponseEntity.badRequest().body("Phone number is required");
        }

        // Generate 6-digit random OTP
        String otp = String.valueOf(new Random().nextInt(900000) + 100000);

        // Store OTP (simulate storing in DB or cache)
        otpStorage.put(phone, otp);

        // Simulate sending SMS (in real use, integrate Twilio or similar)
        System.out.println("Sending OTP " + otp + " to phone: " + phone);

        return ResponseEntity.ok("OTP sent successfully to " + phone);
    }

    // OPTIONAL: expose for testing
    @PostMapping("/verify-otp")
    public ResponseEntity<?> verifyOtp(@RequestBody Map<String, String> request) {
        String phone = request.get("phoneNumber");
        String otp = request.get("otp");

        if (otpStorage.containsKey(phone) && otpStorage.get(phone).equals(otp)) {
            return ResponseEntity.ok("OTP verified successfully");
        }

        return ResponseEntity.status(400).body("Invalid OTP");
    
}
}
