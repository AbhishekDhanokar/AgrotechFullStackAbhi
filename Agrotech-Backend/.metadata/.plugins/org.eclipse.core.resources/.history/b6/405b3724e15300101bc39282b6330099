package com.agrotech.AgrotechBackend.controller;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import com.agrotech.AgrotechBackend.dto.UserDTO;
import com.agrotech.AgrotechBackend.model.User;
import com.agrotech.AgrotechBackend.repository.UserRepository;
import com.agrotech.AgrotechBackend.service.UserService;

@RestController
@RequestMapping("/auth")
@CrossOrigin(origins = "http://localhost:4200")
public class AuthController {

	 @Autowired private UserRepository userRepository;
    @Autowired private UserService userService;
    @Autowired private PasswordEncoder passwordEncoder;

    @PostMapping("/register")
    public String register(@RequestBody UserDTO dto) {
        return userService.register(dto);
    }
    

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody Map<String, String> req) {
        String email = req.get("email");
        String password = req.get("password");

        Optional<User> userOptional = userRepository.findByEmail(email);
        if (userOptional.isPresent()) {
            User user = userOptional.get();

            if (passwordEncoder.matches(password, user.getPassword())) {
                return ResponseEntity.ok(user); // Login success
            }
        }

        return ResponseEntity.status(401).body("Invalid email or password");
    }
    
 // In-memory store to simulate OTPs (can use Redis or DB in real case)
    private final Map<String, String> otpStorage = new HashMap<>();

    @PostMapping("/send-otp")
    public ResponseEntity<?> sendOtp(@RequestBody Map<String, String> request) {
        String phone = request.get("phone");
        System.out.println("Received phone from frontend: " + phone); // âœ… add this log


    // OPTIONAL: expose for testing
    @PostMapping("/verify-otp")
    public ResponseEntity<?> verifyOtp(@RequestBody Map<String, String> request) {
        String phone = request.get("phoneNumber");
        String otp = request.get("otp");

        if (otpStorage.containsKey(phone) && otpStorage.get(phone).equals(otp)) {
            return ResponseEntity.ok("OTP verified successfully");
        }

        return ResponseEntity.status(400).body("Invalid OTP");
    
}
}
