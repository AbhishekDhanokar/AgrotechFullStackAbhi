package com.agrotech.AgrotechBackend.controller;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import com.agrotech.AgrotechBackend.dto.UserDTO;
import com.agrotech.AgrotechBackend.model.User;
import com.agrotech.AgrotechBackend.repository.UserRepository;
import com.agrotech.AgrotechBackend.service.TwilioService;
import com.agrotech.AgrotechBackend.service.UserService;

@RestController
@RequestMapping("/auth")
@CrossOrigin(origins = "http://localhost:4200") // ‚úÖ Allow Angular
public class AuthController {

    @Autowired private UserRepository userRepository;
    @Autowired private UserService userService;
    @Autowired private PasswordEncoder passwordEncoder;
    @Autowired private TwilioService twilioService;

    // OTP storage for demo (Use Redis or DB in production)
    private final Map<String, String> otpStorage = new HashMap<>();

    // ‚úÖ REGISTER
    @PostMapping("/register")
    public ResponseEntity<?> register(@RequestBody UserDTO dto) {
        // ü™µ Log DTO received
        System.out.println("üì¶ Received registration DTO: " + dto);

        // ‚úÖ 1. Check OTP
        String sentOtp = otpStorage.get(dto.getPhone());
        if (sentOtp == null || !sentOtp.equals(dto.getOtp())) {
            return ResponseEntity.status(400).body("Invalid or expired OTP");
        }

        // ‚úÖ 2. Register user using service
        String result = userService.register(dto);

        // ‚úÖ 3. Clear OTP after success
        otpStorage.remove(dto.getPhone());

        // ‚úÖ 4. Send back success
        return ResponseEntity.ok(result);
    }

    // ‚úÖ LOGIN
    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody Map<String, String> req) {
        String email = req.get("email");
        String password = req.get("password");

        Optional<User> userOptional = userRepository.findByEmail(email);
        if (userOptional.isPresent()) {
            User user = userOptional.get();
            if (passwordEncoder.matches(password, user.getPassword())) {
                return ResponseEntity.ok(user);
            }
        }
        return ResponseEntity.status(401).body("Invalid email or password");
    }

    // ‚úÖ SEND OTP
    @PostMapping("/send-otp")
    public ResponseEntity<?> sendOtp(@RequestBody Map<String, String> request) {
        String phone = request.get("phone");
        System.out.println("üìû Phone received from frontend: " + phone);

        if (phone == null || phone.isEmpty()) {
            return ResponseEntity.badRequest().body("Phone number is required");
        }

        // ‚úÖ Generate 6-digit OTP
        String otp = String.valueOf(new Random().nextInt(900000) + 100000);
        System.out.println("üîê Generated OTP: " + otp);

        otpStorage.put(phone, otp);

        try {
            twilioService.sendOtp(phone, otp);
            System.out.println("‚úÖ Twilio sendOtp called");
            return ResponseEntity.ok("OTP sent successfully to " + phone);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(500).body("Failed to send OTP");
        }
    }

    // ‚úÖ VERIFY OTP
    @PostMapping("/verify-otp")
    public ResponseEntity<?> verifyOtp(@RequestBody Map<String, String> request) {
        String phone = request.get("phoneNumber");
        String otp = request.get("otp");

        if (otpStorage.containsKey(phone) && otpStorage.get(phone).equals(otp)) {
            return ResponseEntity.ok("OTP verified successfully");
        }

        return ResponseEntity.status(400).body("Invalid OTP");
    }
}
